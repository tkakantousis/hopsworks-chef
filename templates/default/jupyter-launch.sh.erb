#!/usr/bin/env bash

WAIT_START=20
JUPYTER_HOME=$1
export HADOOP_HOME=$2
export JAVA_HOME=$3
export ANACONDA_ENV=$4
PORT=$5
LOGFILE=${JUPYTER_HOME}/logs/$6
SECRET_DIR=$7
CERTS_DIR=$8

help() {
    echo ""
    echo "usage: $0 JUPYTER_HOME HADOOP_HOME ANACONDA_ENV PORT LOGFILE SECRET_DIR CERTS_DIR HADOOP_USERNAME"
    echo ""
    exit 1
}

function kill_named {
    PID=$(ps aux | grep -i jupyter | grep "${JUPYTER_HOME}" | grep "$PORT" | grep -v grep | awk '{print $2}')
    if [ "$PID" != "" ] ; then
	kill -9 "$PID" > /dev/null 2>&1
        res=$?
    else
	res=$NOT_FOUND
    fi
    return "$res"
}

if [ $# -ne 9 ]; then
  help
fi

export JUPYTER_PATH=$JUPYTER_HOME
export JUPYTER_DATA_DIR=$JUPYTER_HOME
export PDIR=$SECRET_DIR
export JUPYTER_CONFIG_DIR=${JUPYTER_HOME}/conf
export JUPYTER_RUNTIME_DIR=${JUPYTER_HOME}/run
export CLASSPATH=$("${HADOOP_HOME}"/bin/hadoop classpath --glob)
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${HADOOP_HOME}/lib/native:${JAVA_HOME}/jre/lib/amd64/server
export SPARKMAGIC_CONF_DIR=${JUPYTER_HOME}/conf
export PYSPARK_PYTHON=${ANACONDA_ENV}/bin/python
export PYLIB=${ANACONDA_ENV}/lib

export HADOOP_VERSION=<%= node['hops']['version'] %>
export HADOOP_CONF_DIR=${HADOOP_HOME}/etc/hadoop
export HADOOP_CLIENT_OPTS="-Dfs.permissions.umask-mode=0002"
## The name of the environment variable must be the same
## as in HopsSSLSocketFactory in Hops project
export MATERIAL_DIRECTORY=$CERTS_DIR
export HADOOP_USER_NAME=$9 

PID_FILE=${JUPYTER_HOME}/run/jupyter.pid

# Try to make python code reproducible by setting this random seed
# https://www.youtube.com/watch?time_continue=1&v=Ys8ofBeR2kA
export PYTHONHASHSEED=0

if [ -f "$PID_FILE" ] ; then
 PID=$(cat "$PID_FILE")
 kill -0 "$PID" > /dev/null 2>&1
 if [ $? -eq 0 ] ; then
     echo "A jupyter notebook is already running here. Kill it first."
     exit 1
 fi
fi

cd "$JUPYTER_HOME" || exit
# Install facets-dist by linking to it
mkdir -p nbextensions
ln -s /usr/local/share/jupyter/nbextensions/facets-dist nbextensions/facets-dist

cd "$SECRET_DIR" || exit

# setsid works, and 'nohup' doesnt work as nohup processes cant write their stderr/stdout to the logfile 
setsid ${ANACONDA_ENV}/bin/jupyter notebook --debug --no-browser --NotebookApp.port="$PORT" </dev/zero &> "$LOGFILE"  &
echo $! > "$PID_FILE"

# Check that the token is written to the logfile, return when we see it.
timeout=0
while [ $timeout -lt $WAIT_START ] ; do
	sleep 1
	grep 'token' "$LOGFILE"
        if [ $? -eq 0 ] ; then 
          break
        fi
	echo -n "."
	timeout=$((timeout + 1))
done
echo ""

# If the timeout was exceeded, kill jupyter notebook
if [ "$timeout" -eq $WAIT_START ] ; then
 PID=$(cat "$PID_FILE")
 kill "$PID" > /dev/null 2>&1
 if [ $? -ne 0 ] ; then
     kill_named
 fi
fi


exit $?
