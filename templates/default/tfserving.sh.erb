#!/usr/bin/env bash

# This script allows Hopsworks to start/kill/ping (check if alive) a TensorFlow Serving Process.
# There will be 1 tf-serving process per ProjectUser.
# This script can be run by hopsworks (running as user 'glassfish') as a sudo command whereupon
# it changes user to 'tfserving' to run the command as user 'tfserving'.
#

help() {
    echo ""
    echo "usage: $0 [start model_name hdfs_model_path port secretdir username enable_batching project_name] | [kill pid port secretdir] | [update model_name hdfs_model_path secretdir username] "
    echo ""
    exit 1
}

TFSERVING_USER=<%= node['tfserving']['user'] %>
TFSERVING_GROUP=<%= node['tfserving']['group'] %>
HOPSWORKS_USER=<%= node['hopsworks']['user'] %>
DOMAINS_DIR=<%= node['glassfish']['domains_dir'] %>
HADOOP_HOME=<%= node['hops']['base_dir'] %>

if [ "$1" == "kill" ] ; then

    if [ $# -ne 4 ]; then
	help
    fi

    # Sanity checks for injection attacks
    re='^[0-9]+$'
    if ! [[ $2 =~ $re ]] ; then
      echo "error: Not a number" >&2
      help
    fi
    # Check that the port is an int (and not some injection attack)
    re='^[0-9]+$'
     if ! [[ $3 =~ $re ]] ; then
      echo "error: Not a number" >&2
      help
    fi

    if [ ! -d "$4" ] ; then
      echo "Invalid SECRET_DIR directory: $4"
      exit 1
    fi

    su "${TFSERVING_USER}" -c "${DOMAINS_DIR}/domain1/bin/tfserving-kill.sh $2 $3 $4"

    rm -rf "$4"

elif [ "$1" == "start" ] ; then

    if [ $# -ne 9 ]; then
      help
    fi

    command -v tensorflow_model_server
    if [ $? -ne 0 ] ; then
        echo "Could not find tensorflow_model_server command"
        exit 1
    fi

    # Sanity checks for injection attacks
    re='^[0-9]+$'
    if ! [[ $4 =~ $re ]] ; then
      echo "error: Not a number" >&2
      help
    fi

    # Sanity checks for injection attacks
    re='^[0-9]+$'
    if ! [[ $5 =~ $re ]] ; then
      echo "error: Not a number" >&2
      help
    fi

    SECRET_DIR=$6
    if [ -d "${SECRET_DIR}" ] ; then
      echo "Invalid secret directory. Directory already exists: $SECRET_DIR"
      exit 3
    fi

    sudo mkdir "$SECRET_DIR"
    if [ $? -ne 0 ] ; then
      echo "Error: could not create private_dir: $SECRET_DIR"
      exit 1
    fi
    sudo mkdir "$SECRET_DIR/$2"

    sudo chown -R "${TFSERVING_USER}":"${TFSERVING_GROUP}" "$SECRET_DIR"
    sudo chmod -R 771 "$SECRET_DIR"

    su "${HOPSWORKS_USER}" -c "HADOOP_PROXY_USER=$7 ${HADOOP_HOME}/bin/hdfs dfs -copyToLocal $3 $SECRET_DIR/$2"
    if [ $? -ne 0 ] ; then
      echo "Error downloading the model on the local Fs"
      sudo rm -r "$SECRET_DIR"
      exit 1
    fi

    # Launch the tensorflow_serving process as user 'tfserving'
    su "${TFSERVING_USER}" -c "${DOMAINS_DIR}/domain1/bin/tfserving-launch.sh $2 $4 $5 $6 $8 $9"

    if [ $? -ne 0 ] ; then
      echo "Error starting the serving server"
      sudo rm -r "$SECRET_DIR"
      exit 1
    fi

elif [ "$1" == "update" ] ; then

    if [ $# -ne 5 ]; then
      help
    fi
    SECRET_DIR=$4

    if [ ! -d "${SECRET_DIR}" ] ; then
      echo "Invalid secret directory. Directory doesn't exists: $SECRET_DIR"
      exit 3
    fi

    su "${HOPSWORKS_USER}" -c "HADOOP_PROXY_USER=$5 ${HADOOP_HOME}/bin/hdfs dfs -copyToLocal $3 $SECRET_DIR/$2"

    if [ $? -ne 0 ] ; then
      echo "Error downloading the model on the local Fs"
      exit 1
    fi

# get Logs for serving
elif [ "$1" == "logs" ] ; then
    LOGFILE=$3

    cat "${LOGFILE}"
elif [ "$1" == "alive" ] ; then
    su "${TFSERVING_USER}" -c "pgrep -f -a tensorflow_model_server | grep -v pgrep | grep $2 | grep $3"
else
  help
fi


exit $?
