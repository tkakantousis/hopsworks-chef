#!/bin/bash

# This script allows Hopsworks to start/kill/ping (check if alive) a TensorFlow Serving Process.
# There will be 1 tf-serving process per ProjectUser.
# This script can be run by hopsworks (running as user 'glassfish') as a sudo command whereupon
# it changes user to 'tfserving' to run the command as user 'tfserving'.
#

help() {
    echo ""
    echo "usage: $0 [start model_name model_version tfserving_hdfs_dir port secret_dir enable_batching] | [kill model_name pid port secret_dir] | [ping pid] | [list] | [killhard pid]"
    echo ""
    exit 1
}

TFSERVING_USER=<%= node['tfserving']['user'] %>
TFSERVING_GROUP=<%= node['tfserving']['group'] %>
HOPSWORKS_USER=<%= node['hopsworks']['user'] %>
DOMAINS_DIR=<%= node['glassfish']['domains_dir'] %>
HADOOP_HOME=<%= node['hops']['base_dir'] %>

if [ "$1" == "kill" ] ; then

    if [ $# -ne 5 ]; then
	help
    fi
    
    # Sanity checks for injection attacks
    re='^[0-9]+$'
    if ! [[ $3 =~ $re ]] ; then
      echo "error: Not a number" >&2
      help
    fi
    # Check that the port is an int (and not some injection attack)
    re='^[0-9]+$'
     if ! [[ $4 =~ $re ]] ; then
      echo "error: Not a number" >&2
      help
    fi

    if [ ! -d "$5" ] ; then
	echo "Invalid SECRET_DIR directory: $5"
	exit 1
    fi
     
    su ${TFSERVING_USER} -c "${DOMAINS_DIR}/domain1/bin/tfserving-kill.sh $2 $3 $4 $5"

    rm -rf $5

elif [ "$1" == "start" ] ; then

    if [ $# -ne 7 ]; then
	help
    fi

    which tensorflow_model_server
    if [ $? -ne 0 ] ; then
        echo "Could not find tensorflow_model_server command"
        exit 1
    fi

    # Sanity checks for injection attacks
    re='^[0-9]+$'
    if ! [[ $5 =~ $re ]] ; then
      echo "error: Not a number" >&2
      help
    fi
    SECRET_DIR=$6

    if [ -d "${SECRET_DIR}" ] ; then
	echo "Invalid secret directory. Directory already exists: $SECRET_DIR"
	exit 3
    fi
    sudo mkdir -p $SECRET_DIR
    sudo chown $TFSERVING_USER $SECRET_DIR
    
    pid=$(sudo ps -ef | grep tensorflow_model_server | grep "port=$5" | awk '{print $2}')

    if [ "$pid" != "" ] ; then
        su $TFSERVING_USER -c "${DOMAINS_DIR}/domain1/bin/tfserving-kill.sh $2 $pid $5 $6"
	sleep 5
    fi

    parent=$(dirname $SECRET_DIR)
    sudo chown -R ${HOPSWORKS_USER}:${TFSERVING_GROUP} $parent
    sudo chmod 0730 $parent
    sudo mkdir -p $SECRET_DIR
    if [ $? -ne 0 ] ; then
	echo "Error: could not create private_dir: $SECRET_DIR"
	exit 1
    fi
    sudo chmod -R 770 $SECRET_DIR
    sudo chown -R ${TFSERVING_USER}:${TFSERVING_GROUP} $SECRET_DIR
    
    # Launch the tensorflow_serving process as user 'tfserving'
    su ${TFSERVING_USER} -c "${DOMAINS_DIR}/domain1/bin/tfserving-launch.sh $2 $3 $4 $5 $6 $7"

    su ${HOPSWORKS_USER} -c "${HADOOP_HOME}/bin/hdfs dfs -copyToLocal $4/$2 $SECRET_DIR/tfserving/model"

elif [ "$1" == "ping" ] ; then
    if [ $# -ne 2 ]; then
	help
    fi
    sudo ps -ef | grep -v 'grep' | grep tensorflow_model_server | grep $2
    if [ $? -ne 0 ] ; then
	echo "Error checking PID: $2"
	echo "Are you trying to ping a non tensorflow_model_server process?"
	exit 12
    fi
    kill -0 $2

# list 
elif [ "$1" == "list" ] ; then
    # This command will output line-separated PIDs for all running jupyter-notebooks into the tmp file, from where it is read by Hopsworks
    sudo ps -ef | grep -v 'grep' | grep -i tensorflow_model_server | awk '{print $2}' > /tmp/tensorflow_model_server.pids

# killhard PID    
elif [ "$1" == "killhard" ] ; then
    sudo ps -ef | grep -v 'grep' | grep -i tensorflow_model_server | grep $2
    if [ $? -ne 0 ] ; then
	echo "Error killing PID: $2"
	echo "Are you trying to kill a non tensorflow_model_server process?"
	exit 12
    fi
    echo "Trying to 'kill -9' tensorflow_model_server with PID: $2"
    sudo kill -9 $2 2>&1 > /dev/null

# get Logs for serving
elif [ "$1" == "logs" ] ; then
    HOST=$2
    LOGFILE=$3

    cat ${LOGFILE}
else
  help
fi


exit $?
